[core]
	editor = /usr/bin/vim

[user]
	name = Alireza Savand
	email = alireza.savand@gmail.com
[cola]
	fontdiff = Monospace,9,-1,5,50,0,0,0,0,0
[push]
	default = simple

[diff]
	# Detect copies as well as renames
	renames = copies
[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1
[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
[color]
	branch = auto
	diff = auto
	status = auto

[color "branch"]
	current = red reverse
	local = blue
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
[alias]
	st = status
	ci = commit
	br = branch
	co = checkout
	df = diff
	lg = log -p
	cob = checkout -b

	# List commits in short form, with colors and branch/tag annotations. 
	ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate

	# List commits showing changed files
	ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat

	# List with no colors if you need to chain the out put with Unix pipes.
	lnc = log --pretty=format:"%h\\ %s\\ [%cn]"

	# List oneline commits showing dates
	lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short

	# List oneline commits showing relative dates
	ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative

	# default look for short git log:
	le = log --oneline --decorate

	# all the commits related to a file, with the diff of the changes
	filelog = log -u
	fl = log -u

	# Show modified files in last commit
	dl = "!git ll -1"

	# Show a diff last commit
	dlc = diff --cached HEAD^

	# Show content (full diff) of a commit given a revision
	dr  = "!f() { git diff "$1"^.."$1"; }; f"
	lc  = "!f() { git ll "$1"^.."$1"; }; f"
	diffr  = "!f() { git diff "$1"^.."$1"; }; f"

	# Find a file path in codebase
	f = "!git ls-files | grep -i"

	# Search/grep entire codebase for a string
	grep = grep -Ii
	gr = grep -Ii

	# Grep on root dir
	gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"

	# output all aliases
	la = "!git config -l | grep alias | cut -c 7-"

	# Update master branch from remote
	umaster = "!git checkout master && git pull origin master"

	# Delete merged branches
	delete-merged-branches = "!f() { git umaster && git branch --merged | grep -v '^* master$' | grep -v '^  master$' | xargs git branch -d ;}; f"

	# Open editor on global config
	ec = config --global -e

	# Show last tag
	lt = describe --tags --abbrev=0
	
	# Stash List, Apply, Save
	sl = stash list
	sa = stash apply
	ss = stash save
	
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

	

	# List contributors with number of commits
	contributors = shortlog --summary --numbered

	# Divergence (commits we added and commits remote added)
	div = divergence

	# Goodness (summary of diff lines added/removed/total)
	gn = goodness
	gnc = goodness --cached
[gui]
	editor = vim
